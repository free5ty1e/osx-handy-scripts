# -*- mode: ruby -*-
# vi: set ft=ruby :

# All Vagrant configuration is done below. The "2" in Vagrant.configure
# configures the configuration version (we support older styles for
# backwards compatibility). Please don't change it unless you know what
# you're doing.
Vagrant.configure("2") do |config|
  # The most common configuration options are documented and commented below.
  # For a complete reference, please see the online documentation at
  # https://docs.vagrantup.com.

  # Every Vagrant development environment requires a box. You can search for
  # boxes at https://vagrantcloud.com/search.
  config.vm.box = "debian/buster64"

  # Disable automatic box update checking. If you disable this, then
  # boxes will only be checked for updates when the user runs
  # `vagrant box outdated`. This is not recommended.
  # config.vm.box_check_update = false

  # Create a forwarded port mapping which allows access to a specific port
  # within the machine from a port on the host machine. In the example below,
  # accessing "localhost:8080" will access port 80 on the guest machine.
  # NOTE: This will enable public access to the opened port
  # config.vm.network "forwarded_port", guest: 80, host: 8080

  # Create a forwarded port mapping which allows access to a specific port
  # within the machine from a port on the host machine and only allow access
  # via 127.0.0.1 to disable public access
  # config.vm.network "forwarded_port", guest: 80, host: 8080, host_ip: "127.0.0.1"

  # Create a private network, which allows host-only access to the machine
  # using a specific IP.
  # config.vm.network "private_network", ip: "192.168.33.10"

  # Create a public network, which generally matched to bridged network.
  # Bridged networks make the machine appear as another physical device on
  # your network.
  # config.vm.network "public_network"

  # Share an additional folder to the guest VM. The first argument is
  # the path on the host to the actual folder. The second argument is
  # the path on the guest to mount the folder. And the optional third
  # argument is a set of non-required options.
  # config.vm.synced_folder "../data", "/vagrant_data"

  #Below allows 2-way sync of vagrant folder, default method is rsync an that's only 1way during vagrant up
  #You will need to install the vagrant vbguest plugin by typing:
  # vagrant plugin install vagrant-vbguest
  # config.vm.synced_folder ".", "/vagrant"

  # Provider-specific configuration so you can fine-tune various
  # backing providers for Vagrant. These expose provider-specific options.
  # Example for VirtualBox:
  #
  config.vm.provider "virtualbox" do |vb|
    # Display the VirtualBox GUI when booting the machine
    #vb.gui = true
    #   # Customize the amount of memory on the VM:
    # Default amount of memory was not enough for ffmpeg, was being killed by system
    vb.memory = 4096
    vb.cpus = 4
  end

  #
  # View the documentation for the provider you are using for more
  # information on available options.

  # Enable provisioning with a shell script. Additional provisioners such as
  # Ansible, Chef, Docker, Puppet and Salt are also available. Please see the
  # documentation for more information about their specific syntax and use.

  config.vm.provision "shell", inline: <<-SHELL
    echo "Updating apt..."
    apt-get update

    echo "Installing debianusbfileserver by Chris Primeish..."
    apt-get -y install git && pushd ~ && rm -rf debianusbfileserver && git clone https://github.com/free5ty1e/debianusbfileserver.git && debianusbfileserver/scripts/installfiles.sh && popd && finishinstall.sh
    
    echo "Installing required packages..."
    apt-get -y install build-essential autoconf pkg-config nasm libtool cmake zlib1g-dev libpng-dev cifs-utils imagemagick ffmpeg libavformat-dev libavcodec-dev libavutil-dev unzip
    
    echo "Compiling and installing mozjpeg utilities..."
    git clone https://github.com/mozilla/mozjpeg.git
    pushd mozjpeg
    cmake -G"Unix Makefiles"
    make
    sudo make install
    popd

    echo "Compiling and installing jpeg-archive utilities..."
    git clone https://github.com/danielgtaylor/jpeg-archive.git
    # sudo ln -s /opt/mozjpeg/lib32/ /opt/mozjpeg/lib
    pushd jpeg-archive
    make
    sudo make install
    popd

    echo "Compiling and installing untrunc mp4 moov atom repair utility..."
    git clone https://github.com/ponchio/untrunc.git
    pushd untrunc
    wget https://github.com/libav/libav/archive/v12.3.zip -O libav-12.3.zip
    unzip libav-12.3.zip
    pushd libav-12.3
    ./configure
    make
    popd
    g++ -o untrunc -I./libav-12.3 file.cpp main.cpp track.cpp atom.cpp codec_*.cpp codecstats.cpp codec.cpp mp4.cpp log.cpp -L./libav-12.3/libavformat -lavformat -L./libav-12.3/libavcodec -lavcodec -L./libav-12.3/libavresample -lavresample -L./libav-12.3/libavutil -lavutil -lpthread -lz
    sudo cp untrunc /usr/local/bin/
    popd
  SHELL

  config.vm.provision "shell", inline: "echo 'Mounting fileserver' && mkdir -pv /media/sharedusb && mkdir -pv /media/incoming && mount -t cifs -o rw,vers=3.0,dir_mode=0777,file_mode=0777,username=guest,password="" //192.168.100.104/sharedusb /media/sharedusb &&     mount -t cifs -o rw,vers=3.0,dir_mode=0777,file_mode=0777,username=guest,password="" //192.168.100.137/incoming /media/incoming",
    run: "always"

end
